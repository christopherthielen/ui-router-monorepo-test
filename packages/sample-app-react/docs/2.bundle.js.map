{"version":3,"sources":["webpack:///./src/mymessages/states.js","webpack:///./src/global/dataSources.js","webpack:///./src/util/util.js","webpack:///./src/util/sessionStorage.js","webpack:///./src/mymessages/messageListUIService.js","webpack:///./src/mymessages/components/SortMessages.js","webpack:///./src/mymessages/components/MessageTable.js","webpack:///./src/mymessages/MessageList.js","webpack:///./src/mymessages/Message.js","webpack:///./src/mymessages/MyMessages.js","webpack:///./src/mymessages/Compose.js"],"names":["_dataSources","__webpack_require__","composeState","name","url","params","message","views","!$default.$default","_Compose2","default","mymessagesState","parent","resolve","token","resolveFn","FoldersStorage","all","redirectTo","component","data","requiresAuth","messageState","deps","$transition$","MessagesStorage","get","messageId","messages","_messageListUIService2","proximalMessageId","bind","^.^.messagecontent","_Message2","messageListState","folderId","folder","byFolder","messagelist","_MessageList2","states","_sessionStorage","_appConfig","Contacts","_classCallCheck","this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","Folders","Messages","searchObject","_id","indexOf","_appConfig2","emailAddress","search","ContactsStorage","setProp","obj","key","val","pushToArr","array","item","push","guidChar","uniqReduce","arr","flattenReduce","concat","c","Math","floor","random","toString","toUpperCase","guid","split","map","join","_util","SessionStorage","sessionStorageKey","sourceUrl","_this","_initialiseProps","fromSession","sessionStorage","getItem","_data","undefined","_idProp","_eqFn","l","r","JSON","parse","e","console","log","stripHashKey","Promise","fetch","then","resp","json","_commit","setItem","_this2","stringify","thenFn","reject","setTimeout","restDelay","exampleItem","items","filter","example","keys","reduce","memo","id","find","save","put","post","eqFn","arguments","length","idx","findIndex","Error","remove","splice","orderBy","predicate","descending","charAt","substring","a","b","result","valA","valB","instance","sorted","sort","msg","proximalIdx","_react","SortMessages","handleClick","_this$props","props","col","onChangeSort","_props","label","sortClass","chevron","_react2","createElement","style","paddingLeft","className","onClick","propTypes","_propTypes2","string","func","_react3","_messageListUIService","tableColumns","MessageTable","colVisible","columns","changeSort","setState","formattedContent","Date","toISOString","slice","fontSize","state","visibleColumns","column","tableHead","_SortMessages2","tableBody","UISrefActive","class","UISref","to","arrayOf","object","MessageList","_MessageTable2","shape","makeResponseMsg","prefix","from","subject","prefixSubject","body","quoteMessage","date","Message","reply","replyMsg","stateService","go","forward","fwdMsg","editDraft","nextMessageId","nextMessageGetter","nextState","_dialogService2","confirm","reload","actions","action","transition","router","read","edit","delete","dangerouslySetInnerHTML","__html","p","messageBody","MyMessages","folders","UIView","_lodash","Compose","uiCanExit","canExit","isEqual","pristineMessage","gotoPreviousState","hasPrevious","send","_extends","handleChangeMessage","detail","target","value","$stateParams","type","onChange","cols","rows"],"mappings":"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","file":"2.bundle.js","sourcesContent":["import {FoldersStorage, MessagesStorage} from '../global/dataSources';\nimport MessageListUI from './messageListUIService';\n\nimport Compose from './Compose';\nimport MyMessages from './MyMessages';\nimport Message from './Message';\nimport MessageList from './MessageList';\n/**\n* This state allows the user to compose a new message, edit a drafted message, send a message,\n* or save an unsent message as a draft.\n*\n* This state uses view-targeting to take over the ui-view that would normally be filled by the 'mymessages' state.\n*/\nconst composeState = {\n  name: 'mymessages.compose',\n  url: '/compose',\n  // Declares that this state has a 'message' parameter, that defaults to an empty object.\n  // Note the parameter does not appear in the URL.\n  params: {\n    message: {}\n  },\n  views: {\n    // Absolutely targets the $default (unnamed) ui-view, two nesting levels down with the composeComponent.\n    \"!$default.$default\": Compose\n  }\n};\n\n/**\n* The mymessages state. This is the main state for the mymessages page.\n*\n* This state shows the list of folders for the current user. It retrieves the folders from the\n* Folders service.  If a user navigates directly to this state, the state redirects to the 'mymessages.messagelist'.\n*/\nconst mymessagesState = {\n  parent: 'app',\n  name: \"mymessages\",\n  url: \"/mymessages\",\n  resolve: [\n    // All the folders are fetched from the Folders service\n    {\n      token: 'folders',\n      resolveFn: () => FoldersStorage.all(),\n    },\n  ],\n  // If mymessages state is directly activated, redirect the transition to the child state 'mymessages.messagelist'\n  redirectTo: 'mymessages.messagelist',\n  component: MyMessages,\n  // Mark this state as requiring authentication.  See ../routerhooks/requiresAuth.js.\n  data: { requiresAuth: true }\n};\n\n/**\n* This state shows the contents of a single message.\n* It also has UI to reply, forward, delete, or edit an existing draft.\n*/\nconst messageState = {\n  name: 'mymessages.messagelist.message',\n  url: '/:messageId',\n  resolve: [\n    // Fetch the message from the Messages service using the messageId parameter\n    {\n      token: 'message',\n      deps: ['$transition$'],\n      resolveFn: ($transition$) => MessagesStorage.get($transition$.params().messageId),\n    },\n    // Provide the component with a function it can query that returns the closest message id\n    {\n      token: 'nextMessageGetter',\n      deps: ['messages'],\n      resolveFn: (messages) => MessageListUI.proximalMessageId.bind(MessageListUI, messages),\n    },\n  ],\n  views: {\n    // Relatively target the parent-state's parent-state's 'messagecontent' ui-view\n    // This could also have been written using ui-view@state addressing: 'messagecontent@mymessages'\n    // Or, this could also have been written using absolute ui-view addressing: '!$default.$default.messagecontent'\n    \"^.^.messagecontent\": Message\n  }\n};\n\n\n/**\n* This state shows the contents (a message list) of a single folder\n*/\nconst messageListState = {\n  name: 'mymessages.messagelist',\n  url: '/:folderId',\n  // The folderId parameter is part of the URL. This params block sets 'inbox' as the default value.\n  // If no parameter value for folderId is provided on the transition, then it will be defaulted to 'inbox'\n  params: {folderId: \"inbox\"},\n  resolve: [\n    // Fetch the current folder from the Folders service, using the folderId parameter\n    {\n      token: 'folder',\n      deps: ['$transition$'],\n      resolveFn: ($transition$) => FoldersStorage.get($transition$.params().folderId),\n    },\n    // The resolved folder object (from the resolve above) is injected into this resolve\n    // The list of message for the folder are fetched from the Messages service\n    {\n      token: 'messages',\n      deps: ['folder'],\n      resolveFn: (folder) => MessagesStorage.byFolder(folder),\n    }\n  ],\n  views: {\n    // This targets the \"messagelist\" named UIView added to the DOM in the parent state 'mymessages'\n    \"messagelist\": MessageList\n  }\n};\n\nexport const states = [composeState, messageState, messageListState, mymessagesState];\n","import {SessionStorage} from \"../util/sessionStorage\"\nimport AppConfig from './appConfig';\n/**\n* Fake REST Services (Contacts, Folders, Messages) used in the mymessages submodule.\n*\n* Each of these APIs have:\n*\n* .all()\n* .search(exampleItem)\n* .get(id)\n* .save(item)\n* .post(item)\n* .put(item)\n* .remove(item)\n*\n* See ../util/sessionStorage.js for more details, if curious\n*/\n\n/** A fake Contacts REST client API */\nclass Contacts extends SessionStorage {\n  constructor() {\n    // http://beta.json-generator.com/api/json/get/V1g6UwwGx\n    super(\"contacts\", \"static/data/contacts.json\");\n  }\n}\n\n/** A fake Folders REST client API */\nclass Folders extends SessionStorage {\n  constructor() {\n    super('folders', 'static/data/folders.json');\n  }\n}\n\n/** A fake Messages REST client API */\nclass Messages extends SessionStorage {\n  constructor() {\n    // http://beta.json-generator.com/api/json/get/VJl5GbIze\n    super('messages', 'static/data/messages.json');\n  }\n\n  byFolder(folder) {\n    let searchObject = { folder: folder._id };\n    let toFromAttr = [\"drafts\", \"sent\"].indexOf(folder._id) !== -1 ? \"from\" : \"to\";\n    searchObject[toFromAttr] = AppConfig.emailAddress;\n    return this.search(searchObject);\n  }\n}\n\nlet ContactsStorage = new Contacts();\nlet FoldersStorage = new Folders();\nlet MessagesStorage = new Messages();\n\nexport {\n  ContactsStorage,\n  FoldersStorage,\n  MessagesStorage\n}","/** Some utility functions used by the application */\n\nexport const setProp = (obj, key, val) => { obj[key] = val; return obj; };\nexport const pushToArr = (array, item) => { array.push(item); return array; };\nexport const uniqReduce = (arr, item) => arr.indexOf(item) !== -1 ? arr : pushToArr(arr, item);\nexport const flattenReduce = (arr, item) => arr.concat(item);\nlet guidChar = (c) => c !== 'x' && c !== 'y' ? '-' : Math.floor(Math.random()*16).toString(16).toUpperCase();\nexport const guid = () => \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".split(\"\").map(guidChar).join(\"\");","import {pushToArr, guid, setProp} from \"./util\";\nimport AppConfig from '../global/appConfig';\n\n/**\n* This class simulates a RESTful resource, but the API calls fetch data from\n* Session Storage instead of an HTTP call.\n*\n* Once configured, it loads the initial (pristine) data from the URL provided (using HTTP).\n* It exposes GET/PUT/POST/DELETE-like API that operates on the data.  All the data is also\n* stored in Session Storage.  If any data is modified in memory, session storage is updated.\n* If the browser is refreshed, the SessionStorage object will try to fetch the existing data from\n* the session, before falling back to re-fetching the initial data using HTTP.\n*\n* For an example, please see dataSources.js\n*/\nexport class SessionStorage {\n  /**\n  * Creates a new SessionStorage object\n  *\n  * @param sessionStorageKey The session storage key. The data will be stored in browser's session storage under this key.\n  * @param sourceUrl The url that contains the initial data.\n  */\n  constructor (sessionStorageKey, sourceUrl) {\n    let data, fromSession = sessionStorage.getItem(sessionStorageKey);\n    // A promise for *all* of the data.\n    this._data = undefined;\n\n    // For each data object, the _idProp defines which property has that object's unique identifier\n    this._idProp = \"_id\";\n\n    // A basic triple-equals equality checker for two values\n    this._eqFn = (l, r) => l[this._idProp] === r[this._idProp];\n\n    // Services required to implement the fake REST API\n    this.sessionStorageKey = sessionStorageKey;\n\n    if (fromSession) {\n      try {\n        // Try to parse the existing data from the Session Storage API\n        data = JSON.parse(fromSession);\n      } catch (e) {\n        console.log(\"Unable to parse session messages, retrieving intial data.\");\n      }\n    }\n\n    let stripHashKey = (obj) =>\n      setProp(obj, '$$hashKey', undefined);\n\n    // Create a promise for the data; Either the existing data from session storage, or the initial data via fetch request\n    this._data = (data ? Promise.resolve(data) : fetch(sourceUrl).then(resp =>resp.json()))\n      .then(this._commit)\n      .then(() => JSON.parse(sessionStorage.getItem(sessionStorageKey)))\n      .then(array => array.map(stripHashKey));\n\n  }\n\n  /** Saves all the data back to the session storage */\n  _commit = (data) => {\n    sessionStorage.setItem(this.sessionStorageKey, JSON.stringify(data));\n    return Promise.resolve(data);\n  }\n\n  /** Helper which simulates a delay, then provides the `thenFn` with the data */\n  all = (thenFn) => {\n    let promise = new Promise((resolve, reject) => {\n      setTimeout(() => resolve(this._data), AppConfig.restDelay);\n    });\n    return promise.then(thenFn);\n  }\n\n  /** Given a sample item, returns a promise for all the data for items which have the same properties as the sample */\n  search = (exampleItem) => {\n    let contains = (search, inString) =>\n      (\"\" + inString).indexOf(\"\" + search) !== -1;\n    let matchesExample = (example, item) =>\n      Object.keys(example).reduce((memo, key) => memo && contains(example[key], item[key]), true);\n    return this.all(items => items.filter(matchesExample.bind(null, exampleItem)));\n  }\n\n  /** Returns a promise for the item with the given identifier */\n  get = (id) => {\n    return this.all(items => items.find(item => item[this._idProp] === id));\n  }\n\n  /** Returns a promise to save the item.  It delegates to put() or post() if the object has or does not have an identifier set */\n  save = (item) => {\n    return item[this._idProp] ? this.put(item) : this.post(item);\n  }\n\n  /** Returns a promise to save (POST) a new item.   The item's identifier is auto-assigned. */\n  post = (item) => {\n    item[this._idProp] = guid();\n    return this.all(items => pushToArr(items, item)).then(this._commit.bind(this));\n  }\n\n  /** Returns a promise to save (PUT) an existing item. */\n  put = (item, eqFn = this._eqFn) => {\n    return this.all(items => {\n      let idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) throw Error(`${item} not found in ${this}`);\n      items[idx] = item;\n      return this._commit(items).then(() => item);\n    });\n  }\n\n  /** Returns a promise to remove (DELETE) an item. */\n  remove = (item, eqFn = this._eqFn) => {\n    return this.all(items => {\n      let idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) throw Error(`${item} not found in ${this}`);\n      items.splice(idx, 1);\n      return this._commit(items).then(() => item);\n    });\n  }\n}","import AppConfig from '../global/appConfig';\n\nexport function orderBy (predicate) {\n  let descending = 1;\n  if (predicate.charAt(0) === '+' || predicate.charAt(0) === '-') {\n    descending = predicate.charAt(0) === '-' ? -1 : 1;\n    predicate = predicate.substring(1);\n  }\n  return (a, b) => {\n    let result = 0;\n    let valA = a[predicate], valB = b[predicate];\n    if (valA < valB) result = -1;\n    if (valA > valB) result = 1;\n    return result * descending;\n  }\n}\n\nclass MessageListUI {\n  proximalMessageId (messages, messageId) {\n    let sorted = messages.sort(orderBy(AppConfig.sort));\n    let idx = sorted.findIndex(msg => msg._id === messageId);\n    var proximalIdx = sorted.length > idx + 1 ? idx + 1 : idx - 1;\n    return proximalIdx >= 0 ? sorted[proximalIdx]._id : undefined;\n  }\n}\n\nlet instance = new MessageListUI();\nexport default instance;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n/**\n * A directive (for a table header) which changes the app's sort order\n */\nclass SortMessages extends Component {\n  static propTypes = {\n    label: PropTypes.string,\n    col: PropTypes.string,\n    sort: PropTypes.string,\n    onChangeSort: PropTypes.func\n  }\n  handleClick = (e) => {\n    let {col, sort, onChangeSort} = this.props;\n    let newSort = sort === `+${col}`\n      ? `-${col}`\n      : `+${col}`;\n    onChangeSort(newSort);\n  }\n  render () {\n    let {col, label, sort} = this.props, sortClass = '';\n    if (sort == `+${col}`) sortClass = 'fa-sort-asc';\n    else if (sort == `-${col}`) sortClass = 'fa-sort-desc';\n    let chevron = <i style={{paddingLeft:'0.25em'}} className={'fa '+sortClass} />\n\n    return (\n      <span onClick={this.handleClick}>{label} {chevron}</span>\n    );\n  }\n}\n\nexport default SortMessages;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {UISref, UISrefActive} from '@uirouter/react';\n\nimport {orderBy} from '../messageListUIService';\n\nimport AppConfig from '../../global/appConfig';\nimport SortMessages from './SortMessages';\n/**\n* A component that displays a folder of messages as a table\n*\n* If a row is clicked, the details of the message is shown using a relative UISref to `.message`.\n*\n* UISrefActive is used to highlight the selected row.\n*\n* Shows/hides specific columns based on the `columns` resolved prop.\n*/\nconst tableColumns = [\n  { label: '', name: 'read' },\n  { label: 'Sender', name: 'from' },\n  { label: 'Recipient', name: 'to' },\n  { label: 'Subject', name: 'subject' },\n  { label: 'Date', name: 'date' },\n];\n\nclass MessageTable extends Component {\n  static propTypes = {\n    messages: PropTypes.arrayOf(PropTypes.object),\n    columns: PropTypes.arrayOf(PropTypes.string)\n  }\n  constructor (props) {\n    super(props);\n    this.state = { sort: AppConfig.sort }\n  }\n\n  colVisible = (name) => this.props.columns.indexOf(name) !== -1;\n  changeSort = (sort) => this.setState({sort});\n  formattedContent = (message, col) => {\n    if (col === 'date') return new Date(message[col]).toISOString().slice(0,10);\n    if (col === 'read') return !message[col] ? <i className=\"fa fa-circle\" style={{fontSize: '50%'}} /> : '';\n    return message[col];\n  }\n\n  render () {\n    let {sort} = this.state,\n      {messages} = this.props;\n\n    let visibleColumns = tableColumns.filter(column => this.colVisible(column.name));\n    let tableHead = visibleColumns.map(column =>\n      <td key={column.name}><SortMessages label={column.label} col={column.name} sort={sort} onChangeSort={this.changeSort} /></td>\n    );\n    let tableBody = messages.sort(orderBy(sort)).map(message =>\n      <UISrefActive key={message._id} class=\"active\">\n        <UISref to=\".message\" params={{messageId:message._id}}>\n          <tr>{visibleColumns.map(column =>\n            <td key={column.name}>{this.formattedContent(message, column.name)}</td>\n          )}</tr>\n        </UISref>\n      </UISrefActive>\n    );\n    return (\n      <table>\n        <thead>\n          <tr>{tableHead}</tr>\n        </thead>\n        <tbody>\n          {tableBody}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default MessageTable;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport MessageTable from './components/MessageTable';\n\n/**\n * This component renders a list of messages using the `MessageTable` component\n */\nclass MessageList extends Component {\n  static propTypes = {\n    messages: PropTypes.arrayOf(PropTypes.object),\n    folder: PropTypes.shape({\n      columns: PropTypes.arrayOf(PropTypes.string)\n    }),\n  }\n\n  render () {\n    let {folder, messages} = this.props;\n    return (\n      <div className=\"messagelist\">\n        <div className=\"messages\">\n          <MessageTable columns={folder.columns} messages={messages} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MessageList;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {MessagesStorage} from '../global/dataSources';\nimport DialogService from '../global/dialogService';\n\nconst messageBody = (msg = '') => ({ __html: msg.split(/\\n/).map(p => `<p>${p}</p>`).join('\\n') });\nconst prefixSubject = (prefix, message) => prefix + message.subject;\nconst makeResponseMsg = (prefix, msg) => ({ from: msg.to, to: msg.from, subject: prefixSubject(prefix, msg), body: quoteMessage(msg)});\nconst quoteMessage = message => `\n\n\n\n---------------------------------------\nOriginal message:\nFrom: ${message.from}\nDate: ${message.date}\nSubject: ${message.subject}\n\n${message.body}`;\n\n/**\n* This component renders a single message\n*\n* Buttons perform actions related to the message.\n* Buttons are shown/hidden based on the folder's context.\n* For instance, a \"draft\" message can be edited, but can't be replied to.\n*/\nclass Message extends Component {\n  static propTypes = {\n    message: PropTypes.object,\n    nextMessageGetter: PropTypes.func,\n    folder: PropTypes.shape({\n      actions: PropTypes.arrayOf(PropTypes.string)\n    }),\n  }\n\n  constructor (props) {\n    super(props);\n    // Apply the available actions for the message, depending on the folder the message belongs to.\n    this.actions = props.folder.actions.reduce((obj, action) => { obj[action] = true; return obj; }, {});\n    this.stateService = this.props.transition.router.stateService;\n  }\n  /**\n  * When the user views a message, mark it as read and save (PUT) the resource.\n  */\n  componentWillReceiveProps (props) {\n    let message = props.message;\n    message.read = true;\n    MessagesStorage.put(message);\n  }\n  /**\n  * Compose a new message as a reply to this one\n  */\n  reply = () => {\n    let {message} = this.props;\n    let replyMsg = makeResponseMsg(\"Re: \", message);\n    this.stateService.go('mymessages.compose', { message: replyMsg });\n  };\n\n  /**\n  * Compose a new message as a forward of this one.\n  */\n  forward = () => {\n    let {message} = this.props;\n    let fwdMsg = makeResponseMsg(\"Fwd: \", message);\n    delete fwdMsg.to;\n    this.stateService.go('mymessages.compose', { message: fwdMsg });\n  };\n\n  /**\n  * Continue composing this (draft) message\n  */\n  editDraft = () => {\n    let {message} = this.props;\n    this.stateService.go('mymessages.compose', { message: message });\n  };\n\n  /**\n  * Delete this message.\n  *\n  * - confirm deletion\n  * - delete the message\n  * - determine which message should be active\n  * - show that message\n  */\n  remove = () => {\n    let {message} = this.props;\n    let nextMessageId = this.props.nextMessageGetter(message._id);\n    let nextState = nextMessageId ? 'mymessages.messagelist.message' : 'mymessages.messagelist';\n    let params = { messageId: nextMessageId };\n\n    DialogService.confirm(\"Delete?\", undefined)\n      .then(() => MessagesStorage.remove(message))\n      .then(() => this.stateService.go(nextState, params, { reload: 'mymessages.messagelist' }));\n  };\n  render () {\n    let { folder, message, nextMessageGetter } = this.props;\n    return (\n      <div className=\"message\">\n        <div className=\"header\">\n          <div>\n            <h4>{message.subject}</h4>\n            <h5>{message.from} <i className=\"fa fa-long-arrow-right\" /> {message.to}</h5>\n          </div>\n          <div className=\"line2\">\n            {/*<div>{{$ctrl.message.date | date: 'longDate'}} {{$ctrl.message.date | date: 'mediumTime'}}</div>*/}\n            <div>\n              {this.actions.edit ? <button className=\"btn btn-primary\" onClick={this.editDraft}><i className=\"fa fa-pencil\" /> <span>Edit Draft</span></button> : null}\n              {this.actions.reply ? <button className=\"btn btn-primary\" onClick={this.reply}><i className=\"fa fa-reply\" /> <span>Reply</span></button> : null}\n              {this.actions.forward ? <button className=\"btn btn-primary\" onClick={this.forward}><i className=\"fa fa-forward\" /> <span>Forward</span></button> : null}\n              {this.actions.delete ? <button className=\"btn btn-primary\" onClick={this.remove}><i className=\"fa fa-close\" /> <span>Delete</span></button> : null}\n            </div>\n          </div>\n        </div>\n        {/* Pass the raw (plain text) message body through the messageBody function to format slightly nicer */}\n        <div className=\"body\" dangerouslySetInnerHTML={messageBody(message.body)}></div>\n      </div>\n    );\n  }\n}\n\nexport default Message;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {UIView, UISref, UISrefActive} from '@uirouter/react';\n\n/**\n * The main mymessages component.\n *\n * Renders a list of folders, and has two viewports:\n * - messageList: filled with the list of messages for a folder\n * - messagecontent: filled with the contents of a single message.\n */\nclass MyMessages extends Component {\n  static propTypes = {\n    folders: PropTypes.arrayOf(PropTypes.object)\n  }\n\n  render () {\n    let folders = this.props.folders.map(folder => (\n      // Highlight the selected folder:\n      // When the current state matches the UISref's state (and its parameters)\n      // UISrefActive applies the 'selected' class to the li element\n      <UISrefActive key={folder._id} class=\"selected\">\n        <li className=\"folder\">\n          {/* This UISref is a relative link to the 'mymessages.messagelist' substate. It provides the\n            'folderId' parameter value from the current folder's ._id property */}\n          <UISref to=\".messagelist\" params={{folderId:folder._id}}><a><i className=\"fa\"/>{folder._id}</a></UISref>\n        </li>\n      </UISrefActive>\n    ));\n    return (\n      <div>\n        <div className=\"my-messages\">\n          <div className=\"folderlist\">\n            <ul className=\"selectlist list-unstyled\">\n              {folders}\n            </ul>\n          </div>\n          {/* A named view for the list of messages in this folder. This will be filled in by the 'mymessages.messagelist' child state */}\n          <UIView name=\"messagelist\" className=\"messagelist\" />\n        </div>\n        {/*  A named UIView for a message's contents. The 'mymessages.messagelist.message' grandchild state plugs into this UIView */}\n        <UIView name=\"messagecontent\" />\n      </div>\n    );\n  }\n}\n\nexport default MyMessages;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {isEqual} from 'lodash';\n\nimport {MessagesStorage} from '../global/dataSources';\nimport AppConfig from '../global/appConfig';\nimport DialogService from '../global/dialogService';\n/**\n* This component composes a message\n*\n* The message might be new, a saved draft, or a reply/forward.\n* A Cancel button discards the new message and returns to the previous state.\n* A Save As Draft button saves the message to the \"drafts\" folder.\n* A Send button sends the message\n*/\nclass Compose extends Component {\n  static propTypes = {\n    $stateParams: PropTypes.shape({\n      message: PropTypes.object\n    }),\n  }\n  /**\n  * Create our message's model using the current user's email address as 'message.from'\n  * Then extend it with all the properties from (non-url) state parameter 'message'.\n  * Keep two copies: the editable one and the original one.\n  * These copies are used to check if the message is dirty.\n  */\n  constructor(props) {\n    super(props);\n    this.pristineMessage = { body: '', to: '', subject: '', from: AppConfig.emailAddress, ...this.props.$stateParams.message };\n    this.state = {\n      message: { ...this.pristineMessage }\n    }\n  }\n  /**\n  * Checks if the edited copy and the pristine copy are identical when the state is changing.\n  * If they are not identical, the allows the user to confirm navigating away without saving.\n  */\n  uiCanExit = () => {\n    if (this.canExit || isEqual(this.pristineMessage, this.state.message)) return true;\n\n    var message = 'You have not saved this message.';\n    var question = 'Navigate away and lose changes?';\n    return DialogService.confirm(message, question, \"Yes\", \"No\");\n  }\n  /**\n  * Navigates back to the previous state.\n  *\n  * - Checks the transition which activated this controller for a 'from state' that isn't the implicit root state.\n  * - If there is no previous state (because the user deep-linked in, etc), then go to 'mymessages.messagelist'\n  */\n  gotoPreviousState = () => {\n    let transition = this.props.transition;\n    let hasPrevious = !!transition.from().name;\n    let state = hasPrevious ? transition.from() : \"mymessages.messagelist\";\n    let params = hasPrevious ? transition.params(\"from\") : {};\n    transition.router.stateService.go(state, params);\n  };\n\n  /** \"Send\" the message (save to the 'sent' folder), and then go to the previous state */\n  send = () => {\n    let message = this.state.message;\n    MessagesStorage.save({ ...message, date: new Date(), read: true, folder: 'sent' })\n      .then(() => this.canExit = true)\n      .then(() => this.gotoPreviousState());\n  };\n\n  /** Save the message to the 'drafts' folder, and then go to the previous state */\n  save = () => {\n    let message = this.state.message;\n    MessagesStorage.save({ ...message, date: new Date(), read: true, folder: 'drafts'})\n      .then(() => this.canExit = true)\n      .then(() => this.gotoPreviousState());\n  }\n\n  handleChangeMessage = (detail) => (e) => this.setState({ message: { ...this.state.message, [detail]: e.target.value } });\n\n  render () {\n    let message = this.state.message;\n    return (\n      <div className=\"compose\">\n        <div className=\"header\">\n          <div className=\"flex-h\"> <label>Recipient</label> <input type=\"text\" id=\"to\" name=\"to\" value={message.to} onChange={this.handleChangeMessage('to')} /> </div>\n          <div className=\"flex-h\"> <label>Subject</label> <input type=\"text\" id=\"subject\" name=\"subject\" value={message.subject} onChange={this.handleChangeMessage('subject')} /> </div>\n        </div>\n\n        <div className=\"body\">\n          <textarea name=\"body\" id=\"body\" value={message.body} cols=\"30\" rows=\"20\" onChange={this.handleChangeMessage('body')} />\n\n          <div className=\"buttons\">\n            {/* Clicking this button brings the user back to the state they came from (previous state) */}\n            <button className=\"btn btn-primary\" onClick={this.gotoPreviousState}><i className=\"fa fa-times-circle-o\" /><span>Cancel</span></button>\n            <button className=\"btn btn-primary\" onClick={this.save}><i className=\"fa fa-save\" /><span>Save as Draft</span></button>\n            <button className=\"btn btn-primary\" onClick={this.send}><i className=\"fa fa-paper-plane-o\" /><span>Send</span></button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Compose;\n"],"sourceRoot":""}