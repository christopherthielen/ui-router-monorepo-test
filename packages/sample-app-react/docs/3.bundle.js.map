{"version":3,"sources":["webpack:///./src/contacts/states.js","webpack:///./src/global/dataSources.js","webpack:///./src/util/util.js","webpack:///./src/util/sessionStorage.js","webpack:///./src/contacts/components/ContactForm.js","webpack:///./src/contacts/EditContact.js","webpack:///./src/contacts/components/ContactDetail.js","webpack:///./src/contacts/ContactView.js","webpack:///./src/contacts/components/ContactList.js","webpack:///./src/contacts/Contacts.js"],"names":["_dataSources","__webpack_require__","contactsState","parent","name","url","resolve","token","resolveFn","ContactsStorage","all","data","requiresAuth","component","viewContactState","deps","$transition$","get","params","contactId","editContactState","views","^.^.$default","newContactState","states","_sessionStorage","_appConfig","Contacts","_classCallCheck","this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","Folders","Messages","folder","searchObject","_id","indexOf","_appConfig2","default","emailAddress","search","FoldersStorage","MessagesStorage","setProp","obj","key","val","pushToArr","array","item","push","guidChar","uniqReduce","arr","flattenReduce","concat","c","Math","floor","random","toString","toUpperCase","guid","split","map","join","_util","SessionStorage","sessionStorageKey","sourceUrl","_this","_initialiseProps","fromSession","sessionStorage","getItem","_data","undefined","_idProp","_eqFn","l","r","JSON","parse","e","console","log","stripHashKey","Promise","fetch","then","resp","json","_commit","setItem","_this2","stringify","thenFn","reject","setTimeout","restDelay","exampleItem","items","filter","example","keys","reduce","memo","bind","id","find","save","put","post","eqFn","arguments","length","idx","findIndex","Error","remove","splice","_react","_lodash","formInputs","label","path","ContactForm","handleChangeFor","_this$props","props","contact","onContactChange","event","set","_extends","target","value","inputs","input","_react2","createElement","type","onChange","className","propTypes","_propTypes2","object","func","_react3","EditContact","uiCanExit","trans","canExit","isEqual","state","_dialogService2","confirm","handleChangeContact","setState","stateService","transition","router","go","reload","first","last","cloneDeep","_ContactForm2","UISref","to","onClick","ContactDetail","company","age","phone","email","address","street","city","zip","src","picture","ContactView","composeButton","message","editContactButton","_ContactDetail2","ContactList","newContact","contacts","index","UISrefActive","class","href","arrayOf","_ContactList2","UIView","style","margin"],"mappings":"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","file":"3.bundle.js","sourcesContent":["import {ContactsStorage} from '../global/dataSources';\n\nimport Contacts from './Contacts';\nimport ContactView from './ContactView';\nimport EditContact from './EditContact';\n\n/**\n* This state displays the contact list.\n* It also provides a nested ui-view (viewport) for child states to fill in.\n*\n* The contacts are fetched using a resolve.\n*/\nconst contactsState = {\n  parent: 'app', // declares that 'contacts' is a child of 'app'\n  name: \"contacts\",\n  url: \"/contacts\",\n  resolve: [\n    // Resolve all the contacts. The resolved contacts are injected as props into the Contacts component.\n    {\n      token: 'contacts',\n      resolveFn: () => ContactsStorage.all(),\n    }\n  ],\n  data: { requiresAuth: true },\n  component: Contacts\n};\n\n/**\n* This state displays a single contact.\n* The contact to display is fetched using a resolve, based on the `contactId` parameter.\n*/\nconst viewContactState = {\n  name: 'contacts.contact',\n  url: '/:contactId',\n  resolve: [\n    // Resolve the contact, based on the contactId parameter value.\n    // The resolved contact is provided to the contactComponent's contact binding\n    {\n      token: 'contact',\n      deps: ['$transition$'],\n      resolveFn: ($transition$) => ContactsStorage.get($transition$.params().contactId),\n    }\n  ],\n  component: ContactView\n};\n\n/**\n* This state allows a user to edit a contact\n*\n* The contact data to edit is injected from the parent state's resolve.\n*\n* This state uses view targeting to replace the parent ui-view (which would normally be filled\n* by 'contacts.contact') with the edit contact template/controller\n*/\nconst editContactState = {\n  name: 'contacts.contact.edit',\n  url: '/edit',\n  views: {\n    // Relatively target the grand-parent-state's $default (unnamed) ui-view\n    // This could also have been written using ui-view@state addressing: $default@contacts\n    // Or, this could also have been written using absolute ui-view addressing: !$default.$default.$default\n    '^.^.$default': {\n      //bindings: { pristineContact: \"contact\" },\n      component: EditContact\n    }\n  }\n};\n\n/**\n* This state allows a user to create a new contact\n*\n* The contact data to edit is injected into the component from the parent state's resolve.\n*/\nconst newContactState = {\n  name: 'contacts.new',\n  url: '/new',\n  component: EditContact\n};\n\nexport const states = [contactsState, viewContactState, editContactState, newContactState];\n","import {SessionStorage} from \"../util/sessionStorage\"\nimport AppConfig from './appConfig';\n/**\n* Fake REST Services (Contacts, Folders, Messages) used in the mymessages submodule.\n*\n* Each of these APIs have:\n*\n* .all()\n* .search(exampleItem)\n* .get(id)\n* .save(item)\n* .post(item)\n* .put(item)\n* .remove(item)\n*\n* See ../util/sessionStorage.js for more details, if curious\n*/\n\n/** A fake Contacts REST client API */\nclass Contacts extends SessionStorage {\n  constructor() {\n    // http://beta.json-generator.com/api/json/get/V1g6UwwGx\n    super(\"contacts\", \"static/data/contacts.json\");\n  }\n}\n\n/** A fake Folders REST client API */\nclass Folders extends SessionStorage {\n  constructor() {\n    super('folders', 'static/data/folders.json');\n  }\n}\n\n/** A fake Messages REST client API */\nclass Messages extends SessionStorage {\n  constructor() {\n    // http://beta.json-generator.com/api/json/get/VJl5GbIze\n    super('messages', 'static/data/messages.json');\n  }\n\n  byFolder(folder) {\n    let searchObject = { folder: folder._id };\n    let toFromAttr = [\"drafts\", \"sent\"].indexOf(folder._id) !== -1 ? \"from\" : \"to\";\n    searchObject[toFromAttr] = AppConfig.emailAddress;\n    return this.search(searchObject);\n  }\n}\n\nlet ContactsStorage = new Contacts();\nlet FoldersStorage = new Folders();\nlet MessagesStorage = new Messages();\n\nexport {\n  ContactsStorage,\n  FoldersStorage,\n  MessagesStorage\n}","/** Some utility functions used by the application */\n\nexport const setProp = (obj, key, val) => { obj[key] = val; return obj; };\nexport const pushToArr = (array, item) => { array.push(item); return array; };\nexport const uniqReduce = (arr, item) => arr.indexOf(item) !== -1 ? arr : pushToArr(arr, item);\nexport const flattenReduce = (arr, item) => arr.concat(item);\nlet guidChar = (c) => c !== 'x' && c !== 'y' ? '-' : Math.floor(Math.random()*16).toString(16).toUpperCase();\nexport const guid = () => \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".split(\"\").map(guidChar).join(\"\");","import {pushToArr, guid, setProp} from \"./util\";\nimport AppConfig from '../global/appConfig';\n\n/**\n* This class simulates a RESTful resource, but the API calls fetch data from\n* Session Storage instead of an HTTP call.\n*\n* Once configured, it loads the initial (pristine) data from the URL provided (using HTTP).\n* It exposes GET/PUT/POST/DELETE-like API that operates on the data.  All the data is also\n* stored in Session Storage.  If any data is modified in memory, session storage is updated.\n* If the browser is refreshed, the SessionStorage object will try to fetch the existing data from\n* the session, before falling back to re-fetching the initial data using HTTP.\n*\n* For an example, please see dataSources.js\n*/\nexport class SessionStorage {\n  /**\n  * Creates a new SessionStorage object\n  *\n  * @param sessionStorageKey The session storage key. The data will be stored in browser's session storage under this key.\n  * @param sourceUrl The url that contains the initial data.\n  */\n  constructor (sessionStorageKey, sourceUrl) {\n    let data, fromSession = sessionStorage.getItem(sessionStorageKey);\n    // A promise for *all* of the data.\n    this._data = undefined;\n\n    // For each data object, the _idProp defines which property has that object's unique identifier\n    this._idProp = \"_id\";\n\n    // A basic triple-equals equality checker for two values\n    this._eqFn = (l, r) => l[this._idProp] === r[this._idProp];\n\n    // Services required to implement the fake REST API\n    this.sessionStorageKey = sessionStorageKey;\n\n    if (fromSession) {\n      try {\n        // Try to parse the existing data from the Session Storage API\n        data = JSON.parse(fromSession);\n      } catch (e) {\n        console.log(\"Unable to parse session messages, retrieving intial data.\");\n      }\n    }\n\n    let stripHashKey = (obj) =>\n      setProp(obj, '$$hashKey', undefined);\n\n    // Create a promise for the data; Either the existing data from session storage, or the initial data via fetch request\n    this._data = (data ? Promise.resolve(data) : fetch(sourceUrl).then(resp =>resp.json()))\n      .then(this._commit)\n      .then(() => JSON.parse(sessionStorage.getItem(sessionStorageKey)))\n      .then(array => array.map(stripHashKey));\n\n  }\n\n  /** Saves all the data back to the session storage */\n  _commit = (data) => {\n    sessionStorage.setItem(this.sessionStorageKey, JSON.stringify(data));\n    return Promise.resolve(data);\n  }\n\n  /** Helper which simulates a delay, then provides the `thenFn` with the data */\n  all = (thenFn) => {\n    let promise = new Promise((resolve, reject) => {\n      setTimeout(() => resolve(this._data), AppConfig.restDelay);\n    });\n    return promise.then(thenFn);\n  }\n\n  /** Given a sample item, returns a promise for all the data for items which have the same properties as the sample */\n  search = (exampleItem) => {\n    let contains = (search, inString) =>\n      (\"\" + inString).indexOf(\"\" + search) !== -1;\n    let matchesExample = (example, item) =>\n      Object.keys(example).reduce((memo, key) => memo && contains(example[key], item[key]), true);\n    return this.all(items => items.filter(matchesExample.bind(null, exampleItem)));\n  }\n\n  /** Returns a promise for the item with the given identifier */\n  get = (id) => {\n    return this.all(items => items.find(item => item[this._idProp] === id));\n  }\n\n  /** Returns a promise to save the item.  It delegates to put() or post() if the object has or does not have an identifier set */\n  save = (item) => {\n    return item[this._idProp] ? this.put(item) : this.post(item);\n  }\n\n  /** Returns a promise to save (POST) a new item.   The item's identifier is auto-assigned. */\n  post = (item) => {\n    item[this._idProp] = guid();\n    return this.all(items => pushToArr(items, item)).then(this._commit.bind(this));\n  }\n\n  /** Returns a promise to save (PUT) an existing item. */\n  put = (item, eqFn = this._eqFn) => {\n    return this.all(items => {\n      let idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) throw Error(`${item} not found in ${this}`);\n      items[idx] = item;\n      return this._commit(items).then(() => item);\n    });\n  }\n\n  /** Returns a promise to remove (DELETE) an item. */\n  remove = (item, eqFn = this._eqFn) => {\n    return this.all(items => {\n      let idx = items.findIndex(eqFn.bind(null, item));\n      if (idx === -1) throw Error(`${item} not found in ${this}`);\n      items.splice(idx, 1);\n      return this._commit(items).then(() => item);\n    });\n  }\n}","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {get, set} from 'lodash';\n\nconst formInputs = [\n  { label: 'First',   path: 'name.first' },\n  { label: 'Last',   path: 'name.last' },\n  { label: 'Company', path: 'company' },\n  { label: 'Age',   path: 'age' },\n  { label: 'Phone',   path: 'phone' },\n  { label: 'Email',   path: 'email' },\n  { label: 'Street',  path: 'address.street' },\n  { label: 'City',   path: 'address.city' },\n  { label: 'State',   path: 'address.state' },\n  { label: 'Zip',   path: 'address.zip' },\n  { label: 'Image',   path: 'picture' }\n];\n\nclass ContactForm extends Component {\n  static propTypes = {\n    contact: PropTypes.object,\n    onContactChange: PropTypes.func\n  }\n  handleChangeFor = (path) => {\n    const {contact, onContactChange} = this.props;\n    return event => {\n      onContactChange(set({ ...contact }, path, event.target.value));\n    }\n  }\n  render () {\n    let {contact} = this.props;\n    let inputs = formInputs.map(input =>\n      <div key={input.path}>\n        <label>{input.label}</label>\n        <input type=\"text\" value={get(contact, input.path)} onChange={this.handleChangeFor(input.path)}/>\n      </div>\n    );\n    return (\n      <div className=\"details\">\n        {inputs}\n      </div>\n    );\n  }\n}\n\nexport default ContactForm;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {UISref} from '@uirouter/react';\nimport {isEqual, cloneDeep} from 'lodash';\n\nimport ContactForm from './components/ContactForm';\nimport {ContactsStorage} from '../global/dataSources';\nimport DialogService from '../global/dialogService';\n/**\n* The EditContact component\n*\n* This component is used by both `contacts.contact.edit` and `contacts.new` states.\n*\n* The component makes a copy of the contact data for editing by assigning it to the component state.\n* The new copy and original (pristine) copy are used to determine if the contact is \"dirty\" or not.\n* If the user navigates to some other state while the contact is \"dirty\", the `uiCanExit` component\n* hook asks the user to confirm navigation away, losing any edits.\n*\n* The Delete Contact button is wired to the `remove` method, which:\n* - asks for confirmation from the user\n* - deletes the resource from REST API\n* - navigates back to the contacts grandparent state using relative addressing `^.^`\n*   the `reload: true` option re-fetches the contacts list from the server\n*\n* The Save Contact button is wired to the `save` method which:\n* - saves the REST resource (PUT or POST, depending)\n* - navigates back to the parent state using relative addressing `^`.\n*   when editing an existing contact, this returns to the `contacts.contact` \"view contact\" state\n*   when creating a new contact, this returns to the `contacts` list.\n*   the `reload: true` option re-fetches the contacts resolve data from the server\n*/\nclass EditContact extends Component {\n  static propTypes = {\n    contact: PropTypes.object,\n  }\n\n  constructor (props) {\n    super(props);\n    this.canExit = false;\n    this.state = {\n      contact: cloneDeep(this.props.contact)\n    }\n  }\n\n  uiCanExit = (trans) => {\n    if (this.canExit || isEqual(this.state.contact, this.props.contact)) return true;\n\n    let message = 'You have unsaved changes to this contact.';\n    let question = 'Navigate away and lose changes?';\n    return DialogService.confirm(message, question);\n  }\n\n  handleChangeContact = (contact) => {\n    this.setState({ contact });\n  }\n\n  save = () => {\n    // Save the contact, then go to the parent state (either 'contacts' or 'contacts.contact')\n    const {stateService} = this.props.transition.router;\n    ContactsStorage.save(this.state.contact)\n      .then(() => this.canExit = true)\n      .then(() => stateService.go('^', null, { reload: true }));\n  }\n\n  remove = () => {\n    // Ask for confirmation, then delete the contact, then go to the grandparent state ('contacts')\n    let {contact} = this.state;\n    const {stateService} = this.props.transition.router;\n    DialogService.confirm(`Delete contact: ${contact.name.first} ${contact.name.last}`)\n      .then(() => ContactsStorage.remove(contact))\n      .then(() => this.canExit = true)\n      .then(() => stateService.go(\"^.^\", null, { reload: true }));\n  }\n\n  render () {\n    let {contact} = this.state;\n    return (\n      <div className=\"contact\">\n        <ContactForm contact={contact} onContactChange={this.handleChangeContact} />\n        <hr />\n        <div>\n          <UISref to={'^'}><button className=\"btn btn-primary\"><i className=\"fa fa-close\" /><span>Cancel</span></button></UISref>\n          <button className=\"btn btn-primary\" onClick={this.save}><i className=\"fa fa-save\" /><span>Save</span></button>\n          <button className=\"btn btn-primary\" onClick={this.remove}><i className=\"fa fa-close\" /><span>Delete</span></button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default EditContact;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * This component renders a read only view of the details for a single contact.\n */\nclass ContactDetail extends Component {\n  static propTypes = {\n    contact: PropTypes.object\n  }\n  render () {\n    let {contact} = this.props;\n    return (\n      <div className=\"flex-h\">\n        <div className=\"details\">\n          <h3>{contact.name.first + ' ' + contact.name.last}</h3>\n          <div><label>Company</label><div>{contact.company}</div></div>\n          <div><label>Age</label><div>{contact.age}</div></div>\n          <div><label>Phone</label><div>{contact.phone}</div></div>\n          <div><label>Email</label><div>{contact.email}</div></div>\n          <div className=\"flex-h\">\n            <label>Address</label>\n            <div>{contact.address.street}<br />\n              {contact.address.city + ', ' + contact.address.state + ' ' + contact.address.zip}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex nogrow\">\n          <img src={contact.picture}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ContactDetail;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {UISref} from '@uirouter/react';\n\nimport ContactDetail from './components/ContactDetail';\n/**\n* This component renders details for a single contact\n*\n* A button messages the contact by linking to `mymessages.compose` state passing the email as a state parameter.\n* Another button edits the contact by linking to `contacts.contact.edit` state.\n*/\n\nclass ContactView extends Component {\n  static propTypes = {\n    contact: PropTypes.object,\n  }\n\n  render () {\n    let {contact} = this.props;\n\n    // This button has an ui-sref to the mymessages.compose state. The ui-sref provides the mymessages.compose\n    // state with an non-url parameter, which is used as the initial message model\n    let composeButton = (\n      <UISref to={'mymessages.compose'} params={{message: {to: contact.email}}}>\n        <button className=\"btn btn-primary\">\n          <i className=\"fa fa-envelope\" /><span>Message</span>\n        </button>\n      </UISref>\n    );\n\n    // This button has a relative ui-sref to the contacts.contact.edit state\n    let editContactButton = (\n      <UISref to={'.edit'}>\n        <button className=\"btn btn-primary\">\n          <i className=\"fa fa-pencil\" /><span>Edit Contact</span>\n        </button>\n      </UISref>\n    );\n\n    return (\n      <div className=\"contact\">\n        <ContactDetail contact={contact} />\n        {composeButton}\n        {' '}\n        {editContactButton}\n      </div>\n    );\n  }\n}\n\nexport default ContactView;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {UISref, UISrefActive} from '@uirouter/react';\n/**\n * This component renders a list of contacts.\n *\n * At the top is a \"new contact\" button.\n * Each list item is a clickable link to the `contacts.contact` details substate\n */\nclass ContactList extends Component {\n  static propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object)\n  }\n  constructor (props) {\n    super(props);\n  }\n  render () {\n    // This link is a relative ui-sref to the contacts.new state.\n    let newContact = (\n      <UISref to={'.new'}>\n        <a><button className=\"btn btn-primary\"><i className=\"fa fa-pencil\"></i><span>New Contact</span></button></a>\n      </UISref>\n    );\n    // When the current state matches the ui-sref's state (and its parameters)\n    // UISrefActive applies the 'selected' class to the li element\n    let contacts = this.props.contacts.map((contact, index) =>\n      <li key={index}>\n        <UISrefActive class=\"selected\">\n          <UISref to={'.contact'} params={{contactId:contact._id}}><a href=\"asd\">{contact.name.first + ' ' + contact.name.last}</a></UISref>\n        </UISrefActive>\n      </li>\n    );\n    return (\n      <div className={this.props.className}>\n        <ul className=\"selectlist list-unstyled flex nogrow\">\n          <li>{newContact}</li>\n          <li>&nbsp;</li>\n          {contacts}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default ContactList;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {UIView} from '@uirouter/react';\n\nimport ContactList from './components/ContactList';\n/**\n * This component renders the contacts page.\n *\n * On the left is the list of contacts.\n * On the right is the ui-view viewport where contact details appear.\n */\nclass Contacts extends Component {\n  static propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object),\n  }\n\n  constructor (props) {\n    super(props);\n  }\n\n  render () {\n    let {contacts} = this.props;\n    return (\n      <div className=\"my-contacts flex-h\">\n        <ContactList contacts={contacts} className=\"flex nogrow\" />\n        <UIView><h4 style={{margin: '1em 2em'}}>Select a contact</h4></UIView>\n      </div>\n    );\n  }\n}\n\nexport default Contacts;\n"],"sourceRoot":""}